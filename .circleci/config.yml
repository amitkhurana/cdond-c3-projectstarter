version: 2.1

commands:
  destroy_environment:
    description: Destroys all the stack
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udacity backend stack
          command: |
            aws cloudformation delete-stack --stack-name udacity-backend-<< parameters.id >>
          when: << parameters.when >>
      - run:
          name: Destroy udacity frontend stack alongwith s3 butcket
          command: |
            aws s3 rm s3://udacity-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udacity-frontend-<< parameters.id >>
          when: << parameters.when >>
          
  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      workflow_id:
        type: string   
    steps:
      - run:
          name: Revert migrations
          command: |
            SUCCESS=$(curl https://kvdb.io/3BnPwdqbVa9kWadjw1ZpAP/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
          when: << parameters.when >>
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-frontend-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: v1-frontend-{{ .Branch }}-{{ .Revision }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout    
      - restore_cache:
          keys:
            - v1-backend-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: v1-backend-{{ .Branch }}-{{ .Revision }}
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-frontend-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Run frontend tests
          command: |
             cd frontend
             npm install
             npm run test
             
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-backend-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Run backend tests
          command: |
             cd backend
             npm install
             npm run test
             
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-frontend-{{ .Branch }}-{{ .Revision }}
      - run:
          name: scan frontend code
          command: |
             cd frontend            
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-backend-{{ .Branch }}-{{ .Revision }}
      - run:
          name: scan backend code
          command: |
             cd backend            
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udacity-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            curl https://kvdb.io/3BnPwdqbVa9kWadjw1ZpAP/backendip -d "$BACKEND_IP"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udacity-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add ec2 instance ip to ansible inventory
          command: |
            yum install -y tar gzip curl
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt       
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["94:7a:6d:17:24:0f:f9:31:28:65:e5:cd:cd:43:d6:9d"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar ansible
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install          
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            cd backend          
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/3BnPwdqbVa9kWadjw1ZpAP/migration${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            fi
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update -y
            sudo apt-get install -y tar
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(curl https://kvdb.io/3BnPwdqbVa9kWadjw1ZpAP/backendip)
            export API_URL="http://$BACKEND_IP:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udacity-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail          
      
  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["94:7a:6d:17:24:0f:f9:31:28:65:e5:cd:cd:43:d6:9d"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar ansible rsync openssh nodejs npm
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail  
      
  smoke-test:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Get backend url and execute smoke test
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(curl https://kvdb.io/3BnPwdqbVa9kWadjw1ZpAP/backendip)
            export API_URL="http://$BACKEND_IP:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udacity-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - test-backend
            - test-frontend
            - configure-infrastructure
          filters:
            branches:
              only:
                - master            
      - deploy-frontend:
          requires:
            - configure-infrastructure
      - deploy-backend:
          requires:
            - deploy-frontend       
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
