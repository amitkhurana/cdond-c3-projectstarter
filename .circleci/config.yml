version: 2.1

commands:
  destroy_environment:
    description: Destroys all the stack
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udacity backend stack
          command: |
            aws cloudformation delete-stack --stack-name udacity-backend-<< parameters.id >>
          when: << parameters.when >>
      - run:
          name: Destroy udacity frontend stack alongwith s3 butcket
          command: |
            aws s3 rm s3://udacity-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udacity-frontend-<< parameters.id >>
          when: << parameters.when >>
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-frontend-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: v1-frontend-{{ .Branch }}-{{ .Revision }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout    
      - restore_cache:
          keys:
            - v1-backend-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: v1-backend-{{ .Branch }}-{{ .Revision }}
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-frontend-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Run frontend tests
          command: |
             cd frontend
             npm install
             npm run test
             
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-backend-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Run backend tests
          command: |
             cd backend
             npm install
             npm run test
             
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-frontend-{{ .Branch }}-{{ .Revision }}
      - run:
          name: scan frontend code
          command: |
             cd frontend            
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-backend-{{ .Branch }}-{{ .Revision }}
      - run:
          name: scan backend code
          command: |
             cd backend            
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity \
              --stack-name "udacity-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity \
              --stack-name "udacity-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add ec2 instance ip to ansible inventory
          command: |
            cd ./circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - master
